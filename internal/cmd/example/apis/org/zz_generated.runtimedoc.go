/*
Package org GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package org

func (v *CreateOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.Info, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"创建组织",
	}, true
}

func (v *DataList) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Data":
			return []string{}, true
		case "Total":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *DeleteOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true
		}

		return nil, false
	}
	return []string{
		"删除组织",
	}, true
}

func (v *Detail) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "CreatedAt":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.Info, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *GetOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true
		}

		return nil, false
	}
	return []string{
		"查询组织信息",
	}, true
}

func (v *Info) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{
				"组织名称",
			}, true
		case "Type":
			return []string{
				"组织类型",
			}, true

		}

		return nil, false
	}
	return []string{
		"组织详情",
	}, true
}

func (v *ListOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{
		"拉取组织列表",
	}, true
}

func (*Type) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
