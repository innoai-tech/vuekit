import { c as e, j as l, b as s, q as r, F as i } from "./lib-nodepkg-vuekit.bd88abd3.chunk.js";
import { B as n } from "./lib-nodepkg-vueuikit.2b27bb0d.chunk.js";
import { A as o, z as a } from "./lib-nodepkg-typedef.6b41fceb.chunk.js";
let c = { 0: true, 10: true, 20: true, 30: true, 40: true, 50: true, 60: true, 70: true, 80: true, 90: true, 95: true, 100: true }, t = e(() => () => l(i, { children: ["light", "dark"].map((e2) => s("div", { "data-theme": e2, children: [s(n, { component: "h1", sx: { textStyle: "sys.headline-medium", pb: 8, mt: 16 }, children: [o(e2), " Scheme"] }), s(n, { sx: { display: "flex", flexDirection: "column", gap: 16 }, children: [l(n, { sx: { display: "flex", flexWrap: "wrap", gap: 16 }, children: ["primary", "secondary", "tertiary", "error", "warning", "success"].map((e3) => s(n, { sx: { flex: 1, minW: 1 / 4, display: "flex", alignItems: "stretch" }, children: [l(n, { sx: { flex: 1, display: "flex", flexDirection: "column" }, children: ["", "-container"].map((i2) => s(r, { children: [l(n, { sx: { bgColor: `sys.${e3}${i2}`, color: `sys.on-${e3}${i2}`, p: 8, flex: 3 }, children: `${e3}${i2}` }), l(n, { sx: { color: `sys.${e3}${i2}`, bgColor: `sys.on-${e3}${i2}`, p: 8, flex: 1 }, children: `on-${e3}${i2}` })] }, i2)) }), l(n, { sx: { display: "flex", flexDirection: "column" }, children: a(c, (l2, r2) => s(n, { sx: { color: `${e3}.${parseInt(r2) > 50 ? 0 : 100}`, bgColor: `${e3}.${r2}`, w: 60, p: 8, textAlign: "right" }, children: [".", r2] })) })] }, e3)) }), s("div", { children: [l(n, { sx: { display: "flex", "& > *": { width: 1 / 3 } }, children: ["-dim", "", "-bright"].map((e3) => l(n, { sx: { color: "sys.on-surface", bgColor: `sys.surface${e3}`, height: 80, p: 8 }, children: `surface${e3}` })) }), l(n, { sx: { display: "flex", "& > *": { width: 1 / 4 } }, children: ["-lowest", "-low", "", "-high", "-highest"].map((e3) => l(n, { sx: { color: "sys.on-surface", bgColor: `sys.surface-container${e3}`, height: 80, p: 8 }, children: `surface-container${e3}` })) }), l(n, { sx: { display: "flex", "& > *": { width: 1 / 4 } }, children: ["on-surface", "on-surface-variant", "outline", "outline-variant"].map((e3) => l(n, { sx: { color: e3.includes("outline-variant") ? "sys.inverse-surface" : "sys.inverse-on-surface", bgColor: `sys.${e3}`, height: 80, p: 8 }, children: e3 })) }), l(n, { sx: { display: "flex" }, children: a(c, (e3, l2) => s(n, { sx: { color: `neutral.${parseInt(l2) > 50 ? 0 : 100}`, bgColor: `neutral.${l2}`, flex: 1, p: 8, textAlign: "right" }, children: [".", l2] })) })] })] })] }, e2)) })), d = Object.assign(t, { displayName: "ColorSchemeDefault" });
export {
  d as default
};
