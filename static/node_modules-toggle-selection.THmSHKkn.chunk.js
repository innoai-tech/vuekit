import { c as e, i as t, j as a } from "./lib-nodepkg-vuekit.ewYHbGH-.chunk.js";
import { g as o } from "./vendor-core-js.CpeR9-zu.chunk.js";
import { P as l, B as n } from "./lib-nodepkg-vueuikit.znd4NOHg.chunk.js";
import { D as r } from "./webapp-vuekit-layout.yEdwzype.chunk.js";
import { x as s } from "./lib-nodepkg-typedef.E0gBujd-.chunk.js";
var i = function() {
  var e2 = /* @__PURE__ */ document.getSelection();
  if (!e2.rangeCount)
    return function() {
    };
  for (var t2 = document.activeElement, a2 = [], o2 = 0; o2 < e2.rangeCount; o2++)
    a2.push(/* @__PURE__ */ e2.getRangeAt(o2));
  switch (t2.tagName.toUpperCase()) {
    case "INPUT":
    case "TEXTAREA":
      t2.blur();
      break;
    default:
      t2 = null;
  }
  return e2.removeAllRanges(), function() {
    "Caret" === e2.type && e2.removeAllRanges(), e2.rangeCount || a2.forEach(function(t3) {
      e2.addRange(t3);
    }), t2 && t2.focus();
  };
}, c = { "text/plain": "Text", "text/html": "Url", default: "Text" };
let d = /* @__PURE__ */ o(function(e2, t2) {
  var a2, o2, l2, n2, r2, s2, d2, u2, p2 = false;
  t2 || (t2 = {}), l2 = t2.debug || false;
  try {
    if (r2 = /* @__PURE__ */ i(), s2 = /* @__PURE__ */ document.createRange(), d2 = /* @__PURE__ */ document.getSelection(), (u2 = /* @__PURE__ */ document.createElement("span")).textContent = e2, // avoid screen readers from reading out loud the text
    u2.ariaHidden = "true", // reset user styles for span element
    u2.style.all = "unset", // prevents scrolling to the end of the page
    u2.style.position = "fixed", u2.style.top = 0, u2.style.clip = "rect(0, 0, 0, 0)", // used to preserve spaces and line breaks
    u2.style.whiteSpace = "pre", // do not inherit user-select (it may be `none`)
    u2.style.webkitUserSelect = "text", u2.style.MozUserSelect = "text", u2.style.msUserSelect = "text", u2.style.userSelect = "text", u2.addEventListener("copy", function(a3) {
      if (a3.stopPropagation(), t2.format) {
        if (a3.preventDefault(), void 0 === a3.clipboardData) {
          l2 && console.warn("unable to use e.clipboardData"), l2 && console.warn("trying IE specific stuff"), window.clipboardData.clearData();
          var o3 = c[t2.format] || c.default;
          window.clipboardData.setData(o3, e2);
        } else
          a3.clipboardData.clearData(), a3.clipboardData.setData(t2.format, e2);
      }
      t2.onCopy && (a3.preventDefault(), t2.onCopy(a3.clipboardData));
    }), document.body.appendChild(u2), s2.selectNodeContents(u2), d2.addRange(s2), !/* @__PURE__ */ document.execCommand("copy"))
      throw Error("copy command was unsuccessful");
    p2 = true;
  } catch (r3) {
    l2 && console.error("unable to copy using execCommand: ", r3), l2 && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(t2.format || "text", e2), t2.onCopy && t2.onCopy(window.clipboardData), p2 = true;
    } catch (r4) {
      l2 && console.error("unable to copy using clipboardData: ", r4), l2 && console.error("falling back to prompt"), a2 = "message" in t2 ? t2.message : "Copy to clipboard: #{key}, Enter", o2 = (/mac os x/i.test(navigator.userAgent) ? "âŒ˜" : "Ctrl") + "+C", n2 = a2.replace(/#{\s*key\s*}/g, o2), window.prompt(n2, e2);
    }
  } finally {
    d2 && ("function" == typeof d2.removeRange ? d2.removeRange(s2) : d2.removeAllRanges()), u2 && document.body.removeChild(u2), r2();
  }
  return p2;
}), u = /* @__PURE__ */ e(() => {
  let e2 = /* @__PURE__ */ r.use();
  return () => {
    let o2 = /* @__PURE__ */ l.fromColors(e2.value.seed);
    return /* @__PURE__ */ t(n, { sx: { display: "flex", flexDirection: "column", gap: 24 }, children: [/* @__PURE__ */ t(n, { sx: { display: "flex", gap: 56 }, children: [/* @__PURE__ */ a(n, { sx: { display: "flex", flexDirection: "column" }, children: /* @__PURE__ */ s(e2.value.seed, (o3, l2) => /* @__PURE__ */ t(n, { sx: { flex: 1, display: "flex", alignItems: "center", gap: 16 }, children: [/* @__PURE__ */ a(n, { sx: { flex: 1 }, children: l2 }), /* @__PURE__ */ a("input", { type: "color", value: o3, onChange: (t2) => {
      e2.next((e3) => {
        e3.seed[l2] = t2.target.value;
      });
    } })] })) }), /* @__PURE__ */ a(n, { sx: { display: "flex", flexWrap: "wrap", gap: 16 }, children: /* @__PURE__ */ s(e2.value.rules, (r2, s2) => {
      let [i2, c2, d2] = r2;
      return /* @__PURE__ */ t(n, { sx: { display: "flex", alignItems: "center", width: "30%" }, children: [/* @__PURE__ */ a(n, { sx: { flex: 1 }, children: s2 }), /* @__PURE__ */ t(n, { sx: { flex: 1, display: "flex", gap: 4, "& input": { width: "40%", border: "1px solid", borderColor: "sys.outline" } }, children: [/* @__PURE__ */ a("input", { type: "number", value: c2, max: 100, min: 0, style: { backgroundColor: /* @__PURE__ */ l.toHEX(/* @__PURE__ */ o2.seeds[i2].tone(c2)), color: c2 > 50 ? "black" : "white" }, "data-color": /* @__PURE__ */ l.toHEX(/* @__PURE__ */ o2.seeds[i2].tone(c2)), "data-theme": "dark", onChange: (t2) => {
        try {
          let a2 = /* @__PURE__ */ parseInt(t2.target.value);
          e2.next((e3) => {
            e3.rules[s2] = [i2, a2, d2];
          });
        } catch (e3) {
        }
      } }), /* @__PURE__ */ a("input", { type: "number", max: 100, min: 0, value: d2, style: { backgroundColor: /* @__PURE__ */ l.toHEX(/* @__PURE__ */ o2.seeds[i2].tone(d2)), color: d2 > 50 ? "black" : "white" }, "data-color": /* @__PURE__ */ l.toHEX(/* @__PURE__ */ o2.seeds[i2].tone(d2)), "data-theme": "light", onChange: (t2) => {
        try {
          let a2 = /* @__PURE__ */ parseInt(t2.target.value);
          e2.next((e3) => {
            e3.rules[s2] = [i2, c2, a2];
          });
        } catch (e3) {
        }
      } })] })] });
    }) })] }), /* @__PURE__ */ a(n, { sx: { display: "flex", gap: 16, "& > *": { flex: 1 } }, children: /* @__PURE__ */ a("pre", { onClick: () => d(/* @__PURE__ */ JSON.stringify(e2.value)), children: /* @__PURE__ */ a("code", { children: /* @__PURE__ */ JSON.stringify(e2.value, null, 2) }) }) })] });
  };
}), p = /* @__PURE__ */ Object.assign(u, { displayName: "ColorPaletteDefault" });
export {
  p as default
};
