import { c as e, j as s, i as l, B as r, u as i, F as n, m as a, k as o } from "./index.CxFCMZJ4.entry.js";
let c = { 0: true, 10: true, 20: true, 30: true, 40: true, 50: true, 60: true, 70: true, 80: true, 90: true, 95: true, 100: true }, t = Object.assign(e(() => () => s(o, { children: ["light", "dark"].map((e2) => l("div", { "data-theme": e2, children: [l(r, { component: "h1", sx: { textStyle: "sys.headline-medium", pb: 8, mt: 16 }, children: [i(e2), " Scheme"] }), l(r, { sx: { display: "flex", flexDirection: "column", gap: 16 }, children: [s(r, { sx: { display: "flex", flexWrap: "wrap", gap: 16 }, children: ["primary", "secondary", "tertiary", "error", "warning", "success"].map((e3) => l(r, { sx: { flex: 1, minW: 1 / 4, display: "flex", alignItems: "stretch" }, children: [s(r, { sx: { flex: 1, display: "flex", flexDirection: "column" }, children: ["", "-container"].map((i2) => l(n, { children: [s(r, { sx: { bgColor: `sys.${e3}${i2}`, color: `sys.on-${e3}${i2}`, p: 8, flex: 3 }, children: `${e3}${i2}` }), s(r, { sx: { color: `sys.${e3}${i2}`, bgColor: `sys.on-${e3}${i2}`, p: 8, flex: 1 }, children: `on-${e3}${i2}` })] }, i2)) }), s(r, { sx: { display: "flex", flexDirection: "column" }, children: a(c, (s2, i2) => l(r, { sx: { color: `${e3}.${parseInt(i2) > 50 ? 0 : 100}`, bgColor: `${e3}.${i2}`, w: 60, p: 8, textAlign: "right" }, children: [".", i2] })) })] }, e3)) }), l("div", { children: [s(r, { sx: { display: "flex", "& > *": { width: 1 / 3 } }, children: ["-dim", "", "-bright"].map((e3) => s(r, { sx: { color: "sys.on-surface", bgColor: `sys.surface${e3}`, height: 80, p: 8 }, children: `surface${e3}` })) }), s(r, { sx: { display: "flex", "& > *": { width: 1 / 4 } }, children: ["-lowest", "-low", "", "-high", "-highest"].map((e3) => s(r, { sx: { color: "sys.on-surface", bgColor: `sys.surface-container${e3}`, height: 80, p: 8 }, children: `surface-container${e3}` })) }), s(r, { sx: { display: "flex", "& > *": { width: 1 / 4 } }, children: ["on-surface", "on-surface-variant", "outline", "outline-variant"].map((e3) => s(r, { sx: { color: e3.includes("outline-variant") ? "sys.inverse-surface" : "sys.inverse-on-surface", bgColor: `sys.${e3}`, height: 80, p: 8 }, children: e3 })) }), s(r, { sx: { display: "flex" }, children: a(c, (e3, s2) => l(r, { sx: { color: `neutral.${parseInt(s2) > 50 ? 0 : 100}`, bgColor: `neutral.${s2}`, flex: 1, p: 8, textAlign: "right" }, children: [".", s2] })) })] })] })] }, e2)) })), { displayName: "ColorSchemeDefault" });
export {
  t as default
};
