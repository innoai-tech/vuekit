import { c as e, r as t, b as a, j as r } from "./lib-nodepkg-vuekit.bd88abd3.chunk.js";
import { g as o } from "./vendor-core-js.f650e057.chunk.js";
import { b as l, B as n } from "./lib-nodepkg-vueuikit.b9bd37e1.chunk.js";
import { z as s } from "./lib-nodepkg-typedef.6b41fceb.chunk.js";
var c = function() {
  var e2 = document.getSelection();
  if (!e2.rangeCount)
    return function() {
    };
  for (var t2 = document.activeElement, a2 = [], r2 = 0; r2 < e2.rangeCount; r2++)
    a2.push(e2.getRangeAt(r2));
  switch (t2.tagName.toUpperCase()) {
    case "INPUT":
    case "TEXTAREA":
      t2.blur();
      break;
    default:
      t2 = null;
  }
  return e2.removeAllRanges(), function() {
    "Caret" === e2.type && e2.removeAllRanges(), e2.rangeCount || a2.forEach(function(t3) {
      e2.addRange(t3);
    }), t2 && t2.focus();
  };
}, i = { "text/plain": "Text", "text/html": "Url", default: "Text" };
let u = o(function(e2, t2) {
  var a2, r2, o2, l2, n2, s2, u2, d2, p2 = false;
  t2 || (t2 = {}), o2 = t2.debug || false;
  try {
    if (n2 = c(), s2 = document.createRange(), u2 = document.getSelection(), (d2 = document.createElement("span")).textContent = e2, d2.ariaHidden = "true", d2.style.all = "unset", d2.style.position = "fixed", d2.style.top = 0, d2.style.clip = "rect(0, 0, 0, 0)", d2.style.whiteSpace = "pre", d2.style.webkitUserSelect = "text", d2.style.MozUserSelect = "text", d2.style.msUserSelect = "text", d2.style.userSelect = "text", d2.addEventListener("copy", function(a3) {
      if (a3.stopPropagation(), t2.format) {
        if (a3.preventDefault(), void 0 === a3.clipboardData) {
          o2 && console.warn("unable to use e.clipboardData"), o2 && console.warn("trying IE specific stuff"), window.clipboardData.clearData();
          var r3 = i[t2.format] || i.default;
          window.clipboardData.setData(r3, e2);
        } else
          a3.clipboardData.clearData(), a3.clipboardData.setData(t2.format, e2);
      }
      t2.onCopy && (a3.preventDefault(), t2.onCopy(a3.clipboardData));
    }), document.body.appendChild(d2), s2.selectNodeContents(d2), u2.addRange(s2), !document.execCommand("copy"))
      throw Error("copy command was unsuccessful");
    p2 = true;
  } catch (n3) {
    o2 && console.error("unable to copy using execCommand: ", n3), o2 && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(t2.format || "text", e2), t2.onCopy && t2.onCopy(window.clipboardData), p2 = true;
    } catch (n4) {
      o2 && console.error("unable to copy using clipboardData: ", n4), o2 && console.error("falling back to prompt"), a2 = "message" in t2 ? t2.message : "Copy to clipboard: #{key}, Enter", r2 = (/mac os x/i.test(navigator.userAgent) ? "âŒ˜" : "Ctrl") + "+C", l2 = a2.replace(/#{\s*key\s*}/g, r2), window.prompt(l2, e2);
    }
  } finally {
    u2 && ("function" == typeof u2.removeRange ? u2.removeRange(s2) : u2.removeAllRanges()), d2 && document.body.removeChild(d2), n2();
  }
  return p2;
}), d = e(() => {
  let e2 = t({ seed: { primary: "#1270f5", secondary: "#8a90a5", tertiary: "#b58391", neutral: "#5e5e5e", neutralVariant: "#757780", error: "#d93f23", warning: "#e69c00", success: "#5ac220" }, rules: l.fromColors({ primary: "#1270f5", secondary: "#8a90a5", tertiary: "#b58391", neutral: "#5e5e5e", neutralVariant: "#757780", error: "#d93f23", warning: "#e69c00", success: "#5ac220" }).normalizeRoleRules() });
  return () => {
    let t2 = l.fromColors(e2.value.seed);
    return a(n, { sx: { display: "flex", flexDirection: "column", gap: 24 }, children: [r(n, { sx: { display: "flex" }, children: s(e2.value.seed, (t3, o2) => a(n, { sx: { flex: 1, display: "flex", flexDirection: "column", alignItems: "center" }, children: [r("div", { children: o2 }), r("input", { type: "color", value: t3, onInput: (t4) => {
      e2.value = { ...e2.value, seed: { ...e2.value.seed, [o2]: t4.target.value } };
    } })] })) }), r(n, { sx: { display: "flex", flexWrap: "wrap", gap: 16 }, children: s(e2.value.rules, (o2, s2) => {
      let [c2, i2, u2] = o2;
      return a(n, { sx: { display: "flex", alignItems: "center", width: "30%" }, children: [r(n, { sx: { flex: 1 }, children: s2 }), a(n, { sx: { flex: 1, display: "flex", gap: 4, "& input": { width: "40%", border: "1px solid", borderColor: "sys.outline" } }, children: [r("input", { type: "number", value: i2, max: 100, min: 0, style: { backgroundColor: l.toHEX(t2.seeds[c2].tone(i2)), color: i2 > 50 ? "black" : "white" }, "data-color": l.toHEX(t2.seeds[c2].tone(i2)), "data-theme": "dark", onChange: (t3) => {
        try {
          let a2 = parseInt(t3.target.value);
          e2.value = { ...e2.value, rules: { ...e2.value.rules, [s2]: [c2, a2, u2] } };
        } catch (e3) {
        }
      } }), r("input", { type: "number", max: 100, min: 0, value: u2, style: { backgroundColor: l.toHEX(t2.seeds[c2].tone(u2)), color: u2 > 50 ? "black" : "white" }, "data-color": l.toHEX(t2.seeds[c2].tone(u2)), "data-theme": "light", onChange: (t3) => {
        try {
          let a2 = parseInt(t3.target.value);
          e2.value = { ...e2.value, rules: { ...e2.value.rules, [s2]: [c2, i2, a2] } };
        } catch (e3) {
        }
      } })] })] });
    }) }), r(n, { sx: { display: "flex", gap: 16, "& > *": { flex: 1 } }, children: r("pre", { onClick: () => u(JSON.stringify(e2.value)), children: r("code", { children: JSON.stringify(e2.value, null, 2) }) }) })] });
  };
}), p = Object.assign(d, { displayName: "ColorPaletteDefault" });
export {
  p as default
};
