import { t as e, c as t, v as a, w as l, P as o, i as n, B as r, j as s, m as c } from "./index.-RbwNzz2.entry.js";
var i = function() {
  var e2 = document.getSelection();
  if (!e2.rangeCount)
    return function() {
    };
  for (var t2 = document.activeElement, a2 = [], l2 = 0; l2 < e2.rangeCount; l2++)
    a2.push(e2.getRangeAt(l2));
  switch (t2.tagName.toUpperCase()) {
    case "INPUT":
    case "TEXTAREA":
      t2.blur();
      break;
    default:
      t2 = null;
  }
  return e2.removeAllRanges(), function() {
    "Caret" === e2.type && e2.removeAllRanges(), e2.rangeCount || a2.forEach(function(t3) {
      e2.addRange(t3);
    }), t2 && t2.focus();
  };
}, d = { "text/plain": "Text", "text/html": "Url", default: "Text" };
let u = e(function(e2, t2) {
  var a2, l2, o2, n2, r2, s2, c2, u2, p2 = false;
  t2 || (t2 = {}), o2 = t2.debug || false;
  try {
    if (r2 = i(), s2 = document.createRange(), c2 = document.getSelection(), (u2 = document.createElement("span")).textContent = e2, u2.ariaHidden = "true", u2.style.all = "unset", u2.style.position = "fixed", u2.style.top = 0, u2.style.clip = "rect(0, 0, 0, 0)", u2.style.whiteSpace = "pre", u2.style.webkitUserSelect = "text", u2.style.MozUserSelect = "text", u2.style.msUserSelect = "text", u2.style.userSelect = "text", u2.addEventListener("copy", function(a3) {
      if (a3.stopPropagation(), t2.format) {
        if (a3.preventDefault(), void 0 === a3.clipboardData) {
          o2 && console.warn("unable to use e.clipboardData"), o2 && console.warn("trying IE specific stuff"), window.clipboardData.clearData();
          var l3 = d[t2.format] || d.default;
          window.clipboardData.setData(l3, e2);
        } else
          a3.clipboardData.clearData(), a3.clipboardData.setData(t2.format, e2);
      }
      t2.onCopy && (a3.preventDefault(), t2.onCopy(a3.clipboardData));
    }), document.body.appendChild(u2), s2.selectNodeContents(u2), c2.addRange(s2), !document.execCommand("copy"))
      throw Error("copy command was unsuccessful");
    p2 = true;
  } catch (r3) {
    o2 && console.error("unable to copy using execCommand: ", r3), o2 && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(t2.format || "text", e2), t2.onCopy && t2.onCopy(window.clipboardData), p2 = true;
    } catch (r4) {
      o2 && console.error("unable to copy using clipboardData: ", r4), o2 && console.error("falling back to prompt"), a2 = "message" in t2 ? t2.message : "Copy to clipboard: #{key}, Enter", l2 = (/mac os x/i.test(navigator.userAgent) ? "âŒ˜" : "Ctrl") + "+C", n2 = a2.replace(/#{\s*key\s*}/g, l2), window.prompt(n2, e2);
    }
  } finally {
    c2 && ("function" == typeof c2.removeRange ? c2.removeRange(s2) : c2.removeAllRanges()), u2 && document.body.removeChild(u2), r2();
  }
  return p2;
}), p = Object.assign(t(() => {
  let e2 = a.use(), t2 = l();
  return () => {
    let a2 = o.fromColors(e2.value.seed);
    return console.log(t2.value), n(r, { ref: t2, sx: { display: "flex", flexDirection: "column", gap: 24 }, children: [n(r, { sx: { display: "flex", gap: 56 }, children: [s(r, { sx: { display: "flex", flexDirection: "column" }, children: c(e2.value.seed, (t3, a3) => n(r, { sx: { flex: 1, display: "flex", alignItems: "center", gap: 16 }, children: [s(r, { sx: { flex: 1 }, children: a3 }), s("input", { type: "color", value: t3, onChange: (t4) => {
      e2.next((e3) => {
        e3.seed[a3] = t4.target.value;
      });
    } })] })) }), s(r, { sx: { display: "flex", flexWrap: "wrap", gap: 16 }, children: c(e2.value.rules, (t3, l2) => {
      let [c2, i2, d2] = t3;
      return n(r, { sx: { display: "flex", alignItems: "center", width: "30%" }, children: [s(r, { sx: { flex: 1 }, children: l2 }), n(r, { sx: { flex: 1, display: "flex", gap: 4, "& input": { width: "40%", border: "1px solid", borderColor: "sys.outline" } }, children: [s("input", { type: "number", value: i2, max: 100, min: 0, style: { backgroundColor: o.toHEX(a2.seeds[c2].tone(i2)), color: i2 > 50 ? "black" : "white" }, "data-color": o.toHEX(a2.seeds[c2].tone(i2)), "data-theme": "dark", onChange: (t4) => {
        try {
          let a3 = parseInt(t4.target.value);
          e2.next((e3) => {
            e3.rules[l2] = [c2, a3, d2];
          });
        } catch (e3) {
        }
      } }), s("input", { type: "number", max: 100, min: 0, value: d2, style: { backgroundColor: o.toHEX(a2.seeds[c2].tone(d2)), color: d2 > 50 ? "black" : "white" }, "data-color": o.toHEX(a2.seeds[c2].tone(d2)), "data-theme": "light", onChange: (t4) => {
        try {
          let a3 = parseInt(t4.target.value);
          e2.next((e3) => {
            e3.rules[l2] = [c2, i2, a3];
          });
        } catch (e3) {
        }
      } })] })] });
    }) })] }), s(r, { sx: { display: "flex", gap: 16, "& > *": { flex: 1 } }, children: s("pre", { onClick: () => u(JSON.stringify(e2.value)), children: s("code", { children: JSON.stringify(e2.value, null, 2) }) }) })] });
  };
}), { displayName: "ColorPaletteDefault" });
export {
  p as default
};
