{
  "openapi": "3.1.0",
  "info": {
    "title": "",
    "version": ""
  },
  "components": {
    "schemas": {
      "ContentReference": {
        "type": "string",
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/content.Reference"
      },
      "ManifestV1DockerManifestList": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "propertyNames": {
              "type": "string"
            },
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations contains arbitrary metadata for the image index.",
            "x-go-field-name": "Annotations"
          },
          "artifactType": {
            "type": "string",
            "description": "ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.",
            "x-go-field-name": "ArtifactType"
          },
          "manifests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor"
            },
            "description": "Manifests references platform specific manifests.",
            "x-go-field-name": "Manifests"
          },
          "mediaType": {
            "type": "string",
            "description": "MediaType specifies the type of this document data structure e.g. `application/vnd.oci.image.index.v1+json`",
            "x-go-field-name": "MediaType"
          },
          "schemaVersion": {
            "type": "integer",
            "x-format": "int",
            "x-go-field-name": "SchemaVersion"
          },
          "subject": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor",
            "description": "Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
            "x-go-star-level": 1,
            "x-go-field-name": "Subject"
          }
        },
        "required": ["manifests", "schemaVersion"],
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/apis/manifest/v1.DockerManifestList"
      },
      "ManifestV1OciIndex": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "propertyNames": {
              "type": "string"
            },
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations contains arbitrary metadata for the image index.",
            "x-go-field-name": "Annotations"
          },
          "artifactType": {
            "type": "string",
            "description": "ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.",
            "x-go-field-name": "ArtifactType"
          },
          "manifests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor"
            },
            "description": "Manifests references platform specific manifests.",
            "x-go-field-name": "Manifests"
          },
          "mediaType": {
            "type": "string",
            "description": "MediaType specifies the type of this document data structure e.g. `application/vnd.oci.image.index.v1+json`",
            "x-go-field-name": "MediaType"
          },
          "schemaVersion": {
            "type": "integer",
            "x-go-field-name": "SchemaVersion",
            "x-format": "int"
          },
          "subject": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor",
            "description": "Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
            "x-go-star-level": 1,
            "x-go-field-name": "Subject"
          }
        },
        "required": ["manifests", "schemaVersion"],
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/apis/manifest/v1.OciIndex"
      },
      "ManifestV1Payload": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ManifestV1DockerManifestList"
          },
          {
            "$ref": "#/components/schemas/ManifestV1DockerManifest"
          },
          {
            "$ref": "#/components/schemas/ManifestV1OciIndex"
          },
          {
            "$ref": "#/components/schemas/ManifestV1OciManifest"
          }
        ],
        "discriminator": {
          "propertyName": "mediaType",
          "mapping": {
            "application/vnd.oci.image.index.v1+json": {
              "$ref": "#/components/schemas/ManifestV1OciIndex"
            },
            "application/vnd.oci.image.manifest.v1+json": {
              "$ref": "#/components/schemas/ManifestV1OciManifest"
            },
            "application/vnd.docker.distribution.manifest.list.v2+json": {
              "$ref": "#/components/schemas/ManifestV1DockerManifestList"
            },
            "application/vnd.docker.distribution.manifest.v2+json": {
              "$ref": "#/components/schemas/ManifestV1DockerManifest"
            }
          }
        }
      },
      "OpencontainersImageSpecSpecsGoV1Platform": {
        "type": "object",
        "properties": {
          "architecture": {
            "type": "string",
            "x-go-field-name": "Architecture"
          },
          "os": {
            "type": "string",
            "x-go-field-name": "OS"
          },
          "os.features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-field-name": "OSFeatures"
          },
          "os.version": {
            "type": "string",
            "x-go-field-name": "OSVersion"
          },
          "variant": {
            "type": "string",
            "x-go-field-name": "Variant"
          }
        },
        "required": ["architecture", "os"],
        "x-go-vendor-type": "github.com/opencontainers/image-spec/specs-go/v1.Platform"
      },
      "OpencontainersImageSpecSpecsGoV1Descriptor": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "propertyNames": {
              "type": "string"
            },
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations contains arbitrary metadata for the image index.",
            "x-go-field-name": "Annotations"
          },
          "artifactType": {
            "type": "string",
            "description": "ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.",
            "x-go-field-name": "ArtifactType"
          },
          "data": {
            "type": "string",
            "format": "bytes",
            "x-go-field-name": "Data"
          },
          "digest": {
            "$ref": "#/components/schemas/OpencontainersGoDigestDigest",
            "x-go-field-name": "Digest"
          },
          "mediaType": {
            "type": "string",
            "description": "MediaType specifies the type of this document data structure e.g. `application/vnd.oci.image.index.v1+json`",
            "x-go-field-name": "MediaType"
          },
          "platform": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Platform",
            "x-go-star-level": 1,
            "x-go-field-name": "Platform"
          },
          "size": {
            "type": "integer",
            "x-format": "int64",
            "x-go-field-name": "Size"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-field-name": "URLs"
          }
        },
        "required": ["mediaType", "digest", "size"],
        "x-go-vendor-type": "github.com/opencontainers/image-spec/specs-go/v1.Descriptor"
      },
      "ManifestV1DockerManifest": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "propertyNames": {
              "type": "string"
            },
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations contains arbitrary metadata for the image manifest.",
            "x-go-field-name": "Annotations"
          },
          "artifactType": {
            "type": "string",
            "description": "ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.",
            "x-go-field-name": "ArtifactType"
          },
          "config": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor",
            "description": "Config references a configuration object for a container, by digest.\nThe referenced configuration object is a JSON blob that the runtime uses to set up the container.",
            "x-go-field-name": "Config"
          },
          "layers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor"
            },
            "description": "Layers is an indexed list of layers referenced by the manifest.",
            "x-go-field-name": "Layers"
          },
          "mediaType": {
            "type": "string",
            "description": "MediaType specifies the type of this document data structure e.g. `application/vnd.oci.image.manifest.v1+json`",
            "x-go-field-name": "MediaType"
          },
          "schemaVersion": {
            "type": "integer",
            "x-format": "int",
            "x-go-field-name": "SchemaVersion"
          },
          "subject": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor",
            "description": "Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
            "x-go-star-level": 1,
            "x-go-field-name": "Subject"
          }
        },
        "required": ["config", "layers", "schemaVersion"],
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/apis/manifest/v1.DockerManifest"
      },
      "ManifestV1OciManifest": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "propertyNames": {
              "type": "string"
            },
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations contains arbitrary metadata for the image manifest.",
            "x-go-field-name": "Annotations"
          },
          "artifactType": {
            "type": "string",
            "description": "ArtifactType specifies the IANA media type of artifact when the manifest is used for an artifact.",
            "x-go-field-name": "ArtifactType"
          },
          "config": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor",
            "description": "Config references a configuration object for a container, by digest.\nThe referenced configuration object is a JSON blob that the runtime uses to set up the container.",
            "x-go-field-name": "Config"
          },
          "layers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor"
            },
            "description": "Layers is an indexed list of layers referenced by the manifest.",
            "x-go-field-name": "Layers"
          },
          "mediaType": {
            "type": "string",
            "description": "MediaType specifies the type of this document data structure e.g. `application/vnd.oci.image.manifest.v1+json`",
            "x-go-field-name": "MediaType"
          },
          "schemaVersion": {
            "type": "integer",
            "x-go-field-name": "SchemaVersion",
            "x-format": "int"
          },
          "subject": {
            "$ref": "#/components/schemas/OpencontainersImageSpecSpecsGoV1Descriptor",
            "description": "Subject is an optional link from the image manifest to another manifest forming an association between the image manifest and the other manifest.",
            "x-go-star-level": 1,
            "x-go-field-name": "Subject"
          }
        },
        "required": ["config", "layers", "schemaVersion"],
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/apis/manifest/v1.OciManifest"
      },
      "ContentDigest": {
        "type": "string",
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/content.Digest"
      },
      "ContentName": {
        "type": "string",
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/content.Name"
      },
      "IoReadCloser": {
        "type": "string",
        "format": "binary",
        "x-go-vendor-type": "io.ReadCloser"
      },
      "OpencontainersGoDigestDigest": {
        "type": "string",
        "x-go-vendor-type": "github.com/opencontainers/go-digest.Digest"
      },
      "ContentTagList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-field-name": "Name"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-field-name": "Tags"
          }
        },
        "required": ["name", "tags"],
        "x-go-vendor-type": "github.com/octohelm/crkit/pkg/content.TagList"
      }
    }
  },
  "paths": {
    "/api": {
      "get": {
        "tags": ["httprouter"],
        "summary": "OpenAPI",
        "operationId": "OpenAPI",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/_view/0": {
      "get": {
        "tags": ["httprouter"],
        "summary": "OpenAPIView",
        "operationId": "OpenAPIView",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/v2/{name}/blobs/{digest}": {
      "delete": {
        "tags": ["registry"],
        "summary": "DeleteBlob",
        "operationId": "DeleteBlob",
        "parameters": [
          {
            "name": "digest",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentDigest"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "get": {
        "tags": ["registry"],
        "summary": "GetBlob",
        "operationId": "GetBlob",
        "parameters": [
          {
            "name": "digest",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentDigest"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IoReadCloser"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": ["registry"],
        "summary": "HeadBlob",
        "operationId": "HeadBlob",
        "parameters": [
          {
            "name": "digest",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentDigest"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "x-go-type": "any"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{name}/manifests/{reference}": {
      "delete": {
        "tags": ["registry"],
        "summary": "DeleteManifest",
        "operationId": "DeleteManifest",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentReference"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": ["registry"],
        "summary": "PutManifest",
        "operationId": "PutManifest",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentReference"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManifestV1Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "x-go-type": "any"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["registry"],
        "summary": "GetManifest",
        "operationId": "GetManifest",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "reference",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentReference"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManifestV1Payload"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": ["registry"],
        "summary": "HeadManifest",
        "operationId": "HeadManifest",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "reference",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentReference"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "x-go-type": "any"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{name}/blobs/uploads": {
      "post": {
        "tags": ["registry"],
        "summary": "UploadBlob",
        "operationId": "UploadBlob",
        "parameters": [
          {
            "name": "Content-Length",
            "in": "header",
            "schema": {
              "type": "integer",
              "x-format": "int"
            },
            "required": false
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "digest",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ContentDigest"
            },
            "required": false
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/IoReadCloser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "x-go-type": "any"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{name}/blobs/uploads/{id}": {
      "delete": {
        "tags": ["registry"],
        "summary": "CancelUploadBlob",
        "operationId": "CancelUploadBlob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": ["registry"],
        "summary": "UploadPatchBlob",
        "operationId": "UploadPatchBlob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/IoReadCloser"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "x-go-type": "any"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["registry"],
        "summary": "UploadPutBlob",
        "operationId": "UploadPutBlob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "Content-Length",
            "in": "header",
            "schema": {
              "type": "integer",
              "x-format": "int"
            },
            "required": false
          },
          {
            "name": "digest",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ContentDigest"
            },
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/IoReadCloser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "x-go-type": "any"
                }
              }
            }
          }
        }
      }
    },
    "/v2": {
      "get": {
        "tags": ["registry"],
        "summary": "BaseURL",
        "operationId": "BaseURL",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "propertyNames": {
                    "type": "string"
                  },
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/{name}/tags/list": {
      "get": {
        "tags": ["registry"],
        "summary": "ListTag",
        "operationId": "ListTag",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ContentName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentTagList"
                }
              }
            }
          }
        }
      }
    }
  }
}
