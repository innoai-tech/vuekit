// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Encoding Typedef encode 1`] = `
"
      
export class InputTextSchema {

@t.enums(["text"])
"type"!: "text"

}
      
export class OptionSchema {

@t.string()
"label"!: string

@t.string()
"value"!: string

}
      
export class InputSelectSchema {

@t.enums(["select"])
"type"!: "select"

@t.array(t.object(OptionSchema))
"options"!: Array</* @type:object */ Option>

}
      
export class TypeSchema {

@t.annotate({"title":"Test"})
@t.union(t.integer(), t.string())
"intOrStr"!: /* @type:union */ IntOrStr

@t.enums(["leading", "trailing"])
"placement"!: "leading" | "trailing"

@t.nativeEnum(InputType)
@t.optional()
"inputType"?: /* @type:enums */ InputType

@t.record(t.string(), t.any())
@t.optional()
"keyValues"?: { [k: string]: any }

@t.array(t.boolean())
"array"!: Array<boolean>

@t.tuple([t.number(), t.number()])
"point"!: [number, number]

@t.discriminatorMapping("type", InputTextSchema, InputSelectSchema)
"input"!: /* @type:union */ Input

}"
`;

exports[`Encoding TypeScript encode 1`] = `
"
      
export type Type = (/* @type:object */ Base & {
  "input": /* @type:union */ Input,
})
      
export type Base = {
  "intOrStr": /* @type:union */ IntOrStr,
  "placement": "leading" | "trailing",
  "inputType"?: /* @type:enums */ InputType,
  "keyValues"?: { [k: string]: any },
  "array": Array<boolean>,
  "point": [number, number],
}
      
export type IntOrStr = (number | string)
      
export enum InputType {
text = "text",
number = "number",
select = "select"         
}
      
export const displayInputType = (v: InputType) => {
  return ({
"text": "文本",
"number": "数字",
"select": "选项"   
  })[v] ?? v      
}
      
export type Input = (/* @type:object */ InputText | /* @type:object */ InputSelect)
      
export type InputText = {
  "type": "text",
}
      
export type InputSelect = {
  "type": "select",
  "options": Array</* @type:object */ Option>,
}
      
export type Option = {
  "label": string,
  "value": string,
}"
`;

exports[`Encoding JSONSchema encode 1`] = `
{
  "$defs": {
    "Base": {
      "additionalProperties": false,
      "properties": {
        "array": {
          "items": {
            "type": "boolean",
          },
          "type": "array",
        },
        "inputType": {
          "$ref": "#/$defs/InputType",
        },
        "intOrStr": {
          "$ref": "#/$defs/IntOrStr",
          "description": "test",
          "title": "Test",
        },
        "keyValues": {
          "additionalProperties": {},
          "propertyNames": {
            "type": "string",
          },
          "type": "object",
        },
        "placement": {
          "enum": [
            "leading",
            "trailing",
          ],
        },
        "point": {
          "items": [
            {
              "type": "number",
            },
            {
              "type": "number",
            },
          ],
          "type": "array",
        },
      },
      "required": [
        "intOrStr",
        "placement",
        "array",
        "point",
      ],
      "type": "object",
    },
    "Input": {
      "discriminator": {
        "propertyName": "type",
      },
      "oneOf": [
        {
          "$ref": "#/$defs/InputText",
        },
        {
          "$ref": "#/$defs/InputSelect",
        },
      ],
    },
    "InputSelect": {
      "additionalProperties": false,
      "properties": {
        "options": {
          "items": {
            "$ref": "#/$defs/Option",
          },
          "type": "array",
        },
        "type": {
          "enum": [
            "select",
          ],
        },
      },
      "required": [
        "type",
        "options",
      ],
      "type": "object",
    },
    "InputText": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "enum": [
            "text",
          ],
        },
      },
      "required": [
        "type",
      ],
      "type": "object",
    },
    "InputType": {
      "enum": [
        "text",
        "number",
        "select",
      ],
    },
    "IntOrStr": {
      "oneOf": [
        {
          "type": "integer",
        },
        {
          "type": "string",
        },
      ],
    },
    "Option": {
      "additionalProperties": false,
      "properties": {
        "label": {
          "type": "string",
        },
        "value": {
          "type": "string",
        },
      },
      "required": [
        "label",
        "value",
      ],
      "type": "object",
    },
  },
  "allOf": [
    {
      "$ref": "#/$defs/Base",
    },
    {
      "additionalProperties": false,
      "properties": {
        "input": {
          "$ref": "#/$defs/Input",
        },
      },
      "required": [
        "input",
      ],
      "type": "object",
    },
  ],
}
`;
